---
- name: Deploy Application
  hosts: app_server
  become: yes
  tasks:

    # Debug
    - name: Verifiera app-mapp
      stat:
        path: /app
      register: app_dir
      failed_when: not app_dir.stat.exists

    # Debug
    - name: Debug källmapp
      delegate_to: localhost
      shell: |
        pwd
        ls -la ../../
      register: source_debug

    # Debug
    - name: Visa källmapp
      debug:
        var: source_debug.stdout_lines

    # Rensa gamla filer
    - name: Rensa gamla filer
      shell: |
        cd /app
        sudo rm -rf Frontend/* Backend/*
        sudo rm -f *.sln *.yml docker-compose.yml mongo-init.js .env
        sudo chown -R 1001:docker .
      ignore_errors: yes

    # Kopiera alla filer med rsync
    - name: Kopiera applikationskod
      synchronize:
        src: ../../
        dest: /app/
        rsync_opts:
          - "--exclude=.git"
          - "--exclude=.github"
          - "--exclude=node_modules"
          - "--exclude=infrastructure"
          - "--exclude=ansible"
          - "--exclude=terraform"
          - "--chown=1001:docker"
        delete: yes
      delegate_to: localhost

    # Debug
    - name: Verifiera kopiering
      shell: |
        echo "=== App struktur ==="
        ls -la /app
        echo "=== Frontend innehåll ==="
        ls -la /app/Frontend
        echo "=== Frontend/src innehåll ==="
        ls -la /app/Frontend/src
      register: copy_verify

    # Debug
    - name: Visa verifiering
      debug:
        var: copy_verify.stdout_lines

    # Debug
    - name: Verifiera App.jsx
      shell: |
        echo "=== App.jsx innehåll ==="
        cat /app/Frontend/src/App.jsx || echo "App.jsx saknas"
      register: app_jsx_content

    # Konfigurera miljöfiler
    - name: Konfigurera miljöfiler
      block:
        - name: Backend .env
          copy:
            content: |
              MONGODB_URI="mongodb://{{ lookup('env', 'MONGODB_USER') }}:{{ lookup('env', 'MONGODB_PASSWORD') }}@mongodb:27017/{{ lookup('env', 'MONGODB_DATABASE') }}?authSource=admin"
              API_KEY="{{ lookup('env', 'API_KEY') }}"
              MONGODB_ADMIN="{{ lookup('env', 'MONGODB_ADMIN') }}"
              MONGODB_ADMIN_PASSWORD="{{ lookup('env', 'MONGODB_ADMIN_PASSWORD') }}"
              MONGODB_DATABASE="{{ lookup('env', 'MONGODB_DATABASE') }}"
            dest: /app/.env
            mode: '0600'

        - name: Frontend .env
          copy:
            content: |
              VITE_API_BASE_URL="http://{{ lookup('env', 'AZURE_VM_IP') }}/api"
              VITE_API_KEY="{{ lookup('env', 'API_KEY') }}"
            dest: /app/Frontend/.env
            mode: '0600'

    # Rensa Docker
    - name: Cleanup Docker
      shell: |
        cd /app
        docker compose down
        docker system prune -af --volumes
        rm -rf Frontend/node_modules Frontend/dist Backend/bin Backend/obj

    # Bygg och starta med Docker Compose
    - name: Bygg och starta med Docker Compose
      shell: |
        cd /app
        echo "Starting fresh build at $(date)"
        docker compose build --no-cache --pull
        docker compose up -d
      register: compose_result

    # Vänta på att containers ska starta
    - name: Vänta på att containers ska starta
      pause:
        seconds: 15

    # Debug
    - name: Verifiera containers
      shell: |
        echo "=== Container status ==="
        docker ps -a
        echo "=== Container logs ==="
        docker logs tbas_frontend --tail 50
        docker logs tbas_backend --tail 50
      register: container_status

    # Debug
    - name: Display container status
      debug:
        var: container_status.stdout_lines