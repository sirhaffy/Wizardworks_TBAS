---
- name: Deploy TBAS Application
  hosts: app_server
  become: yes
  tasks:
    - name: Verifiera app-mapp
      stat:
        path: /app
      register: app_dir
      failed_when: not app_dir.stat.exists

    - name: Docker debug info
      shell: |
        echo "=== Current containers ==="
        docker ps -a
        echo "=== Current images ==="
        docker images
        echo "=== Current volumes ==="
        docker volume ls
      register: docker_debug

    - name: Display Docker debug info
      debug:
        var: docker_debug.stdout_lines

    - name: Aggressiv rensning av Docker
      shell: |
        echo "Stopping all containers..."
        docker stop $(docker ps -aq) || true
        echo "Removing all containers..."
        docker rm -f $(docker ps -aq) || true
        echo "Removing all images..."
        docker rmi -f $(docker images -q) || true
        echo "Removing all volumes..."
        docker volume rm $(docker volume ls -q) || true
        echo "Pruning system..."
        docker system prune -af
      register: cleanup_result

    - name: Display cleanup result
      debug:
        var: cleanup_result.stdout_lines

    - name: Konfigurera miljöfiler
      block:
        - name: Backend .env
          copy:
            content: |
              MONGODB_URI="mongodb://{{ lookup('env', 'MONGODB_USER') }}:{{ lookup('env', 'MONGODB_PASSWORD') }}@mongodb:27017/{{ lookup('env', 'MONGODB_DATABASE') }}?authSource=admin"
              API_KEY="{{ lookup('env', 'API_KEY') }}"
              MONGODB_ADMIN="{{ lookup('env', 'MONGODB_ADMIN') }}"
              MONGODB_ADMIN_PASSWORD="{{ lookup('env', 'MONGODB_ADMIN_PASSWORD') }}"
              MONGODB_DATABASE="{{ lookup('env', 'MONGODB_DATABASE') }}"
            dest: /app/.env
            mode: '0600'

        - name: Frontend .env
          copy:
            content: |
              VITE_API_BASE_URL="http://{{ lookup('env', 'AZURE_VM_IP') }}/api"
              VITE_API_KEY="{{ lookup('env', 'API_KEY') }}"
            dest: /app/Frontend/.env
            mode: '0600'

    - name: Bygg och starta med Docker Compose
      shell: |
        cd /app
        echo "=== Starting fresh build ==="
        docker compose build --no-cache --pull
        echo "=== Build complete, checking image details ==="
        docker image inspect app-frontend:latest || true
        echo "=== Starting containers ==="
        docker compose up -d --force-recreate
      register: compose_result

    - name: Display compose result
      debug:
        var: compose_result.stdout_lines

    - name: Vänta på att containers ska starta
      pause:
        seconds: 15

    - name: Final container status
      shell: |
        echo "=== Final containers ==="
        docker ps -a
        echo "=== Final images ==="
        docker images
      register: final_status

    - name: Display final status
      debug:
        var: final_status.stdout_lines

    - name: Verify Frontend build
      shell: |
        CONTAINER_ID=$(docker ps -q -f name=tbas_frontend)
        if [ -z "$CONTAINER_ID" ]; then
          echo "Frontend container not found" >&2
          exit 1
        fi

        echo "Found container ID: $CONTAINER_ID"
        echo "Container details:"
        docker inspect $CONTAINER_ID

        echo "Copying and checking App.js..."
        docker cp ${CONTAINER_ID}:/usr/share/nginx/html/assets/App-*.js /tmp/App.js

        if grep -q "Using configuration" /tmp/App.js || \
           grep -q "API Base URL" /tmp/App.js || \
           grep -q "API Key" /tmp/App.js; then
          echo "❌ Frontend container: App.js still contains debug lines - build failed to update" >&2
          cat /tmp/App.js
          exit 1
        else
          echo "✅ Frontend container: App.js has been properly rebuilt"
        fi
      register: verify_result
      failed_when: verify_result.rc != 0

    - name: Display verification result
      debug:
        var: verify_result.stdout_lines