- name: Deploy Application
  hosts: app_server
  become: yes
  tasks:
    # Create the main application directory with proper permissions
    - name: Create app directory
      file:
        path: /app
        state: directory
        owner: azureuser
        group: azureuser
        mode: '0755'

    # Copy all application files to the server
    - name: Copy application files
      copy:
        src: ./
        dest: /app/
        owner: azureuser
        group: azureuser
        mode: preserve

    # Debug information about paths for troubleshooting
    - name: Debug paths
      debug:
        msg:
          - "Playbook directory: {{ playbook_dir }}"
          - "Working directory: {{ lookup('env', 'PWD') }}"

    # Verify Frontend directory exists after copy
    - name: Check if Frontend directory exists
      stat:
        path: /app/Frontend
      register: frontend_dir

    # Fail early if Frontend directory is missing
    - name: Fail if Frontend directory is missing
      fail:
        msg: "Frontend directory is missing"
      when: not frontend_dir.stat.isdir

    # Full Docker cleanup
    - name: Full Docker cleanup
      shell: |
        cd /app
        docker compose down --remove-orphans --volumes || true
        docker stop $(docker ps -aq) || true
        docker rm $(docker ps -aq) || true
        docker rmi $(docker images -q) || true
        docker system prune -af --volumes || true
      ignore_errors: yes

    # Create environment files
    - name: Create Backend .env file
      copy:
        content: |
          MONGODB_URI="{{ lookup('env', 'MONGODB_URI') }}"
          PROD_API_KEY="{{ lookup('env', 'PROD_API_KEY') }}"
        dest: /app/.env
        owner: azureuser
        group: azureuser
        mode: '0600'

    - name: Create Frontend .env file
      copy:
        content: |
          VITE_API_BASE_URL="http://{{ lookup('env', 'AZURE_VM_IP') }}/api"
          VITE_API_KEY="{{ lookup('env', 'PROD_API_KEY') }}"
        dest: /app/Frontend/.env
        owner: azureuser
        group: azureuser
        mode: '0600'

    # Create production settings from template
    - name: Create appsettings.Production.json from template
      template:
        src: templates/appsettings.Production.json.j2
        dest: /app/Backend/appsettings.Production.json
        mode: '0644'
        owner: azureuser
        group: azureuser
      vars:
        app_ip: "{{ lookup('env', 'VM_IP') }}"
        mongodb_uri: "{{ lookup('env', 'MONGODB_URI') }}"
        api_key: "{{ lookup('env', 'PROD_API_KEY') }}"

    # Verify all required files exist
    - name: Verify required files
      stat:
        path: "{{ item }}"
      register: file_checks
      with_items:
        - /app/.env
        - /app/Frontend/.env
        - /app/Backend/appsettings.Production.json
        - /app/docker-compose.yml

    # Debug file status
    - name: Debug file status
      debug:
        msg: "{{ item.item }} exists: {{ item.stat.exists }}"
      with_items: "{{ file_checks.results }}"

    # Create unified Docker Compose env file
    - name: Create Docker Compose env file
      copy:
        content: |
          MONGODB_URI="{{ lookup('env', 'MONGODB_URI') }}"
          PROD_API_KEY="{{ lookup('env', 'PROD_API_KEY') }}"
          VITE_API_BASE_URL="http://{{ lookup('env', 'AZURE_VM_IP') }}/api"
          VITE_API_KEY="{{ lookup('env', 'PROD_API_KEY') }}"
        dest: /app/.env.docker
        owner: azureuser
        group: azureuser
        mode: '0600'

    # Start application using Docker Compose with explicit env file
    - name: Start Docker Compose
      shell: |
        cd /app
        docker compose --env-file .env.docker up -d --remove-orphans --force-recreate