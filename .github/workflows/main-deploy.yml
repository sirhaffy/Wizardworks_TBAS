name: Production Deployment

on:
  push:
    branches: [ main ]

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Install yarn
        run: npm install -g yarn

      - name: Install dependencies
        working-directory: Frontend
        run: |
          yarn install --frozen-lockfile

      - name: Build & Test Backend
        run: |
          dotnet restore
          dotnet build --configuration Release
          dotnet test Backend.Test/Backend.Test.csproj --configuration Release --verbosity normal

      - name: Build Frontend
        working-directory: Frontend
        run: yarn build

      # Debug : Verify App.jsx contains required config
      - name: Verify App.jsx rebuild
      run: |
        if grep -q "Using configuration" Frontend/src/App.jsx || \
          grep -q "API Base URL" Frontend/src/App.jsx || \
          grep -q "API Key" Frontend/src/App.jsx; then
          echo "❌ App.jsx still contains debug lines - build failed to update" && exit 1
        else
          echo "✅ App.jsx has been properly rebuilt"
        fi

  infrastructure:
    name: Infrastructure Setup
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup SSH keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/tbas_deploy_key
          chmod 600 ~/.ssh/tbas_deploy_key
          ssh-keygen -y -f ~/.ssh/tbas_deploy_key > ~/.ssh/tbas_deploy_key.pub || true
          touch ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
        working-directory: infrastructure/terraform

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init & Apply
        working-directory: infrastructure/terraform
        env:
          TF_VAR_AZURE_VM_IP: ${{ secrets.AZURE_VM_IP }}
        run: |
          terraform init
          terraform import azurerm_resource_group.main /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/app-rg || true
          terraform import azurerm_virtual_network.main /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/app-rg/providers/Microsoft.Network/virtualNetworks/app-rg-vnet || true
          terraform import azurerm_subnet.main /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/app-rg/providers/Microsoft.Network/virtualNetworks/app-rg-vnet/subnets/internal || true
          terraform import azurerm_public_ip.main /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/app-rg/providers/Microsoft.Network/publicIPAddresses/app-rg-ip || true
          terraform import azurerm_network_security_group.main /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/app-rg/providers/Microsoft.Network/networkSecurityGroups/app-rg-nsg || true
          terraform import azurerm_network_interface.main /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/app-rg/providers/Microsoft.Network/networkInterfaces/app-rg-nic || true
          terraform import azurerm_linux_virtual_machine.main /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/app-rg/providers/Microsoft.Compute/virtualMachines/app-rg-vm || true
          terraform apply -auto-approve

  deploy:
    name: Application Deployment
    needs: infrastructure
    runs-on: ubuntu-latest
    env:
      MONGODB_URI: mongodb://appuser:${{ secrets.MONGODB_PASSWORD }}@mongodb:27017/tbas_db?authSource=admin
      AZURE_VM_IP: ${{ secrets.AZURE_VM_IP }}
      API_KEY: ${{ secrets.API_KEY }}
      MONGODB_USER: ${{ secrets.MONGODB_USER }}
      MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
      MONGODB_ADMIN: ${{ secrets.MONGODB_ADMIN }}
      MONGODB_ADMIN_PASSWORD: ${{ secrets.MONGODB_ADMIN_PASSWORD }}
      MONGODB_DATABASE: ${{ secrets.MONGODB_DATABASE }}
    steps:
      - uses: actions/checkout@v3

      - name: Create environment files
        run: |
          # Create Frontend .env
          echo "VITE_API_BASE_URL=http://${{ secrets.AZURE_VM_IP }}/api" > Frontend/.env
          echo "VITE_API_KEY=${{ secrets.API_KEY }}" >> Frontend/.env

          # Create Backend .env
          echo "MONGODB_URI=${{ env.MONGODB_URI }}" > .env
          echo "API_KEY=${{ env.API_KEY }}" >> .env
          echo "MONGODB_USER=${{ env.MONGODB_USER }}" >> .env
          echo "MONGODB_PASSWORD=${{ env.MONGODB_PASSWORD }}" >> .env
          echo "MONGODB_ADMIN=${{ env.MONGODB_ADMIN }}" >> .env
          echo "MONGODB_ADMIN_PASSWORD=${{ env.MONGODB_ADMIN_PASSWORD }}" >> .env
          echo "MONGODB_DATABASE=${{ env.MONGODB_DATABASE }}" >> .env

      - name: Setup Ansible
        run: |
          sudo apt-add-repository --yes --update ppa:ansible/ansible
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y ansible

      - name: Install Ansible collections
        run: ansible-galaxy collection install community.docker

      - name: Deploy with Ansible
        working-directory: infrastructure/ansible
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ssh_key
          chmod 600 ssh_key
          ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i inventory.yml playbook.yml --private-key=ssh_key

